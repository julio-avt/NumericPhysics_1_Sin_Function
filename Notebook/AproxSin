{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0a7ea489",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "06445595",
   "metadata": {},
   "outputs": [],
   "source": [
    "def coef_n(n: int,x ) -> float:\n",
    "    \"\"\"Esta función calcula recursivamente el n-ésimo coeficiente \n",
    "    del desarrollo en series de potencias de la función sen(x)\"\"\"\n",
    "    a_n=0\n",
    "    if x == 0.0: #Si x=0, entonces todo vale cero\n",
    "        return a_n\n",
    "    if n == 2:\n",
    "        a_n = -x**3/6\n",
    "        return a_n\n",
    "    if n ==1:\n",
    "        a_n = x\n",
    "        return a_n \n",
    "    if n > 2:\n",
    "       a_n = -(x**2)/( (2*n - 2) * (2*n - 1) ) * coef_n(n-1,x)\n",
    "       #print(f\"Coeficiente: {n}\")\n",
    "    \n",
    "    #print(a_n)\n",
    "    return a_n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e0442b65",
   "metadata": {},
   "outputs": [],
   "source": [
    "def suma(n: int, x = 1.0)-> float:\n",
    "    \"\"\"Esta función suma los primeros n términos del desarrollo en \n",
    "    serie de potencias de la función sen(x)\"\"\"\n",
    "    suma = 0.0\n",
    "    \n",
    "    if x == 0:\n",
    "      return suma  \n",
    "\n",
    "    suma = 0\n",
    "    for i in range(n):\n",
    "        suma += coef_n(i+1,x)\n",
    "    return suma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "83d31a8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def n_lim(x = 1.0, n = 1) ->int:\n",
    "    \"\"\"Esta función obtiene el número n que hace referencia a la cantidad \n",
    "    de términos que debe considerarse en el desarrollo en series de potencias\n",
    "    de la función sen(x) para tener una paroximación con error absolto menor a \n",
    "    una parte en 10^8\"\"\"\n",
    "    if x == 0:\n",
    "        return 0\n",
    "    \n",
    "    while True:\n",
    "        try: \n",
    "            if abs(coef_n(n,x)/suma(n-1, x)) > 10**(-8):\n",
    "                n += 1\n",
    "            else:\n",
    "                break\n",
    "        except ZeroDivisionError:\n",
    "            n += 1        \n",
    "    return n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f6b2a782",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.71238898038469"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pi = math.pi\n",
    "x = 3*pi/2\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "3e3c5330",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 | 0.0 | \n"
     ]
    }
   ],
   "source": [
    "x=0\n",
    "if x < 2*pi:\n",
    "    n = n_lim(x)\n",
    "    s = suma(10,x)\n",
    "    senx = math.sin(x)\n",
    "    print(f\"{n} | {s} | \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c047283a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.0046817541353186875"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=pi/2\n",
    "coef_n(4,x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "959f9ea8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "0 == 0.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23eb6abd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
